arr2 <- array(c(a,b), dim = c(4,4,2))
print(arr2)
# 3. Array into matrix
apply(arr1,2,c)
# 4. Converting both the array into matrices:
matrix1 <- arr1[,,1]
matrix2 <- arr1[,,2]
#==================================================
#Use of seq() and rep()
# 1. Seq()
print(seq(from=4,to=40))
# 2. Rep()
print(rep(72,4))
#Vector
# 1. Creating on empty Vector of different types
# a. Numeric
v1 <- c(1,2,3,4,5,6)
class(v1)
# b. Character
v2 <- c('a','b','c','d')
class(v2)
# 2. Adding first element to vector
vc <- c()
vc[1] <- 8
vc
# 3. Adding 5 more elements/ length of vector
vc[2:6] <- c(21,35,61,40,72)
vc
# 4. Adding last element(use length)
vc[length(vc)+1] <- 17
vc
# 5. Adding element at the middle (use function 2 ways)
vc <- c(vc[1:3],10,vc[4:6])
vc
# 6. Display element at the certain position
vc[6]
# 7. Display element at the first and last position
print(paste(vc[1],vc[length(vc)]))
# 8. Sorting the Vector in Ascending and Descending
print(paste("Ascending order:",sort(vc)))
print(paste("Descending order:",sort(vc,decreasing = T)))
# 9. Indexity
print(vc[3:6])
# 10. Replacing an element
vc[4] <- 20
vc
#====================================================
#Matrix
# 1. Creating a matrix
M<- matrix(c(1:12), nrow = 4, byrow = TRUE)
print(M)
N<- matrix(c(1:12), nrow = 4)
print(N)
# 2. Displaying a matrix
rownames = c("row1","row2","row3","row4")
colnames = c("col1","col2","col3")
P <- matrix(c(1:12),nrow = 4, byrow = TRUE, dimnames = list(rownames,colnames))
print(P)
# 3. Adding matrix
result <- M + N
cat("Result of addition","\n")
print(result)
# 4. Multiplying a matrix
mul <- M * N
cat("Result of multiplication","\n")
print(mul)
# 5. Sum of elements of matrix
sum(M)
# 6. Sum of rows and sum of columns
rowSums(M)
colSums(M)
#=======================================================================
# Lists
# 1. Create list and name it and print list:
list1 <- list("I.T.","Sem-8")
list2 <- list("R Programming", "Experiment 3")
# 2. Add element at middle:
list1 <- list(list1[1:2],"Engineering",list1[3])
print(list1)
# 3. Add element at end:
list1[length(list1)+1] <- c("abc")
print(list1)
# 4. Add element at the beginning:
list1 <- list("MHSSCE",list1)
print(list1)
# 5. Merge two lists:
l <- c(list1, list2)
print(l)
#=================================================
# 1. Create an array:
a <- c(1,2,3)
b <- c(4,5,6,7,8,9)
arr1 <- array(c(a,b), dim = c(3,3,2))
print(arr1)
# 2. Create an array using two matrix of 4*4:
a <- c(10,20,30)
b <- c(100,200,300,400,500,600)
arr2 <- array(c(a,b), dim = c(4,4,2))
print(arr2)
# 3. Array into matrix
apply(arr1,2,c)
# 4. Converting both the array into matrices:
matrix1 <- arr1[,,1]
matrix2 <- arr1[,,2]
print(matrix1)
print(matrix2)
#==================================================
#Use of seq() and rep()
# 1. Seq()
print(seq(from=4,to=40))
# 2. Rep()
print(rep(72,4))
# Create a input vector
data <- scan()
# Create a input vector
data <- scan()
# Create a input vector
data <- scan()
# Create a input vector
data <- c("East","West","North","South","North","West","East","East","West","North","West","South")
print(data)
print(is.factor(data))
factor_data <- factor(data)
print(factor_data)
print(is.factor(factor_data))
# Create a input vector
data <- c("East","West","North","South","North","West","East","East","West","North","West","South")
print(data)
print(is.factor(data))
#Apply factor function
factor_data <- factor(data)
print(factor_data)
print(is.factor(factor_data))
#new order
new_order_data <- factor(factor_data, levels = c("East","West","North","South"))
print(new_order_data)
# Create a input vector
data <- c("East","West","North","South","North","West","East","East","West","North","West","South")
print(data)
print(is.factor(data))
#Apply factor function
factor_data <- factor(data)
print(factor_data)
print(is.factor(factor_data))
#new order
new_order_data <- factor(factor_data, levels = c("East","West","North","South"))
print(new_order_data)
# Create a input vector
data <- c("East","West","North","South","North","West","East","East","West","North","West","South")
print(data)
print(is.factor(data))
#Apply factor function
factor_data <- factor(data)
print(factor_data)
print(is.factor(factor_data))
#new order
new_order_data <- factor(factor_data, levels = c("East","West","North","South"))
print(new_order_data)
#========================================================================================================
#Creating a data frame
emp.data <- data.frame(
emp_id = <- (1:5),
emp name = c("Rick", "Dan", "Michelle", "Ryan", "Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Print the data frame.
print(emp.data)
# Create a input vector
data <- c("East","West","North","South","North","West","East","East","West","North","West","South")
print(data)
print(is.factor(data))
#Apply factor function
factor_data <- factor(data)
print(factor_data)
print(is.factor(factor_data))
#new order
new_order_data <- factor(factor_data, levels = c("East","West","North","South"))
print(new_order_data)
#========================================================================================================
#Creating a data frame
emp.data <- data.frame(
emp_id <- (1:5),
emp name = c("Rick", "Dan", "Michelle", "Ryan", "Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Print the data frame.
print(emp.data)
# Create a input vector
data <- c("East","West","North","South","North","West","East","East","West","North","West","South")
print(data)
print(is.factor(data))
#Apply factor function
factor_data <- factor(data)
print(factor_data)
print(is.factor(factor_data))
#new order
new_order_data <- factor(factor_data, levels = c("East","West","North","South"))
print(new_order_data)
#========================================================================================================
#Creating a data frame
emp.data <- data.frame(
emp_id = c(1:5),
emp name = c("Rick", "Dan", "Michelle", "Ryan", "Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Print the data frame.
print(emp.data)
# Create a input vector
data <- c("East","West","North","South","North","West","East","East","West","North","West","South")
print(data)
print(is.factor(data))
#Apply factor function
factor_data <- factor(data)
print(factor_data)
print(is.factor(factor_data))
#new order
new_order_data <- factor(factor_data, levels = c("East","West","North","South"))
print(new_order_data)
#========================================================================================================
#Creating a data frame
emp.data <- data.frame(
emp_id = c(1:5),
emp_name = c("Rick", "Dan", "Michelle", "Ryan", "Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Print the data frame.
print(emp.data)
plot(cars)
plot(c(1,2),c(3))
plot(c(1,2),c(3,4))
install.packages("readxl")
install.packages("readxl")
library("readxl")
df = read_excel("train.xlsx")
setwd("C:\Users\Acer\OneDrive\Desktop\R Project\Airline Fair Prediction")
install.packages("readxl")
install.packages("readxl")
library("readxl")
setwd("C:\\Users\\Acer\\OneDrive\\Desktop\\R Project\\Airline Fair Prediction")
df = read_excel("train.xlsx")
View(df)
head(df)
names(df)
str(df)
summary(df)
summary(is.na(df))
#Dealing with missing values
df = na.omit(df)
summary(is.na(df))
#Suitable data type for the column
unique(df$Total_Stops)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "non-stop",0)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "1 stop",1)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "2 stops",2)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "3 stops",3)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "4 stops",4)
unique(df$Total_Stops)
class(df$Total_Stops) <- "integer"
head(df$Total_Stops)
m <- "25m"
find(3)
find("m")
for (each in df$Duration) {
cat(each)
}
for (each in df$Duration[0:2]) {
cat(each)
}
for (each in df$Duration[1:2]) {
cat(each)
}
for (each in df$Duration[1:5]) {
cat(each)
}
for (each in df$Duration[1:5]) {
cat(gregexpr("h",each))
}
print(gregexpr("h",each))
for (each in df$Duration[1:5]) {
print(gregexpr("h",each))
}
for (each in df$Duration[1:5]) {
print(unlist(gregexpr("h",each)))
}
unlist(gregexpr("h",m))
as.integer("25")
duration <- c()
for (each in df$Duration[1:5]) {
dur <- 0
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(each[1:unlist(gregexpr("h",each))])
}
if(unlist(gregexpr("m",each)) != -1){
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(each[unlist(gregexpr("h",each))+1:unlist(gregexpr("m",each))])
}
else{
dur <- dur + as.integer(each[1:unlist(gregexpr("h",each))])
}
}
duration <- c(duration,dur)
}
for (each in df$Duration[1:5]) {
dur <- 0
if(unlist(gregexpr("h",each)) != -1){
cat(each[1:unlist(gregexpr("h",each))])
dur <- dur + as.integer(each[1:unlist(gregexpr("h",each))])
}
if(unlist(gregexpr("m",each)) != -1){
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(each[unlist(gregexpr("h",each))+1:unlist(gregexpr("m",each))])
}
else{
dur <- dur + as.integer(each[1:unlist(gregexpr("h",each))])
}
}
duration <- c(duration,dur)
}
m[1:2]
m[1:3]
duration <- c()
for (each in df$Duration[1:5]) {
dur <- 0
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))))
}
if(unlist(gregexpr("m",each)) != -1){
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,unlist(gregexpr("h",each))+1,unlist(gregexpr("m",each))))
}
else{
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))))
}
}
duration <- c(duration,dur)
}
as.integer(substr(m,1,unlist(gregexpr("m",each))))
as.integer(substr(m,1,unlist(gregexpr("m",m))))
substr(m,1,unlist(gregexpr("m",m)))
unlist(gregexpr("m",m))
substr(m,1,3)
substr(m,1,2)
duration <- c()
for (each in df$Duration[1:5]) {
dur <- 0
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))
}
if(unlist(gregexpr("m",each)) != -1){
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,unlist(gregexpr("h",each))+1,unlist(gregexpr("m",each))-1))
}
else{
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))
}
}
duration <- c(duration,dur)
}
duration <- c()
for (each in df$Duration[1:5]) {
dur <- 0
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))*60
}
if(unlist(gregexpr("m",each)) != -1){
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,unlist(gregexpr("h",each))+1,unlist(gregexpr("m",each))-1))
}
else{
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))
}
}
duration <- c(duration,dur)
}
duration <- c()
for (each in df$Duration) {
dur <- 0
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))*60
}
if(unlist(gregexpr("m",each)) != -1){
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,unlist(gregexpr("h",each))+1,unlist(gregexpr("m",each))-1))
}
else{
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))
}
}
duration <- c(duration,dur)
}
df["Duration (in mins)"] <- duration
#Dropping columns which are of no use
data <- subset(df, -c("Route","Additional Info","Dep_Time","Arrival_Time"))
#Dropping columns which are of no use
data <- subset(df, select = -c("Route","Additional Info","Dep_Time","Arrival_Time"))
#Dropping columns which are of no use
data <- subset(df, select = -c(Route,"Additional Info","Dep_Time","Arrival_Time"))
#Dropping columns which are of no use
data <- subset(df, select = -c(Route,Additional Info,Dep_Time,Arrival_Time))
#Dropping columns which are of no use
data <- subset(df, select = -c(Route,AdditionalInfo,Dep_Time,Arrival_Time))
#Dropping columns which are of no use
data <- subset(df, select = -c(Route,Dep_Time,Arrival_Time))
View(data)
data <- subset(df, select = -c(Additional Info))
#Dropping columns which are of no use
data <- subset(df, select = -c(Route,Dep_Time,Arrival_Time,`Additional Info`))
View(data)
install.packages("readxl")
install.packages("readxl")
library("readxl")
setwd("C:\\Users\\Acer\\OneDrive\\Desktop\\R Project\\Airline Fair Prediction")
df = read_excel("train.xlsx")
View(df)
head(df)
names(df)
str(df)
summary(df)
summary(is.na(df))
#Dealing with missing values
df = na.omit(df)
summary(is.na(df))
#Suitable data type for the column
unique(df$Total_Stops)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "non-stop",0)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "1 stop",1)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "2 stops",2)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "3 stops",3)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "4 stops",4)
unique(df$Total_Stops)
class(df$Total_Stops) <- "integer"
head(df$Total_Stops)
#Suitable metrics for the column
duration <- c()
for (each in df$Duration) {
dur <- 0
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))*60
}
if(unlist(gregexpr("m",each)) != -1){
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,unlist(gregexpr("h",each))+1,unlist(gregexpr("m",each))-1))
}
else{
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))
}
}
duration <- c(duration,dur)
}
df["Duration (in mins)"] <- duration
#Dropping columns which are of no use
data <- subset(df, select = -c(Route,Dep_Time,Arrival_Time,`Additional Info`))
View(data)
#Dropping columns which are of no use
data <- subset(df, select = -c(Route,Dep_Time,Arrival_Time,`Additional Info`,Duration))
View(data)
install.packages("readxl")
library("readxl")
setwd("C:\\Users\\Acer\\OneDrive\\Desktop\\R Project\\Airline Fair Prediction")
df = read_excel("train.xlsx")
View(df)
head(df)
names(df)
str(df)
summary(df)
summary(is.na(df))
#Dealing with missing values
df = na.omit(df)
summary(is.na(df))
#Suitable data type for the column
unique(df$Total_Stops)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "non-stop",0)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "1 stop",1)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "2 stops",2)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "3 stops",3)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "4 stops",4)
unique(df$Total_Stops)
class(df$Total_Stops) <- "integer"
head(df$Total_Stops)
#Suitable metrics for the column
duration <- c()
for (each in df$Duration) {
dur <- 0
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))*60
}
if(unlist(gregexpr("m",each)) != -1){
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,unlist(gregexpr("h",each))+1,unlist(gregexpr("m",each))-1))
}
else{
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))
}
}
duration <- c(duration,dur)
}
df["Duration (in mins)"] <- duration
#Dropping columns which are of no use
data <- subset(df, select = -c(Route,Dep_Time,Arrival_Time,`Additional Info`,Duration))
View(data)

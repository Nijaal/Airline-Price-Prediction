mul <- M * N
cat("Result of multiplication","\n")
print(mul)
# 5. Sum of elements of matrix
sum(M)
# 6. Sum of rows and sum of columns
rowSums(M)
colSums(M)
#=======================================================================
# Lists
# 1. Create list and name it and print list:
list1 <- list("I.T.","Sem-8")
list2 <- list("R Programming", "Experiment 3")
# 2. Add element at middle:
list1 <- list(list1[1:2],"Engineering",list1[3])
print(list1)
# 3. Add element at end:
list1[length(list1)+1] <- c("abc")
print(list1)
# 4. Add element at the beginning:
list1 <- list("MHSSCE",list1)
print(list1)
# 5. Merge two lists:
l <- c(list1, list2)
print(l)
#=================================================
# 1. Create an array:
a <- c(1,2,3)
b <- c(4,5,6,7,8,9)
arr1 <- array(c(a,b), dim = c(3,3,2))
print(arr1)
# 2. Create an array using two matrix of 4*4:
a <- c(10,20,30)
b <- c(100,200,300,400,500,600)
arr2 <- array(c(a,b), dim = c(4,4,2))
print(arr2)
# 3. Array into matrix
apply(arr1,2,c)
# 4. Converting both the array into matrices:
matrix1 <- arr1[,,1]
matrix2 <- arr1[,,2]
print(matrix1)
print(matrix2)
#==================================================
#Use of seq() and rep()
# 1. Seq()
print(seq(from=4,to=40))
# 2. Rep()
print(rep(72,4))
# Create a input vector
data <- scan()
# Create a input vector
data <- scan()
# Create a input vector
data <- scan()
# Create a input vector
data <- c("East","West","North","South","North","West","East","East","West","North","West","South")
print(data)
print(is.factor(data))
factor_data <- factor(data)
print(factor_data)
print(is.factor(factor_data))
# Create a input vector
data <- c("East","West","North","South","North","West","East","East","West","North","West","South")
print(data)
print(is.factor(data))
#Apply factor function
factor_data <- factor(data)
print(factor_data)
print(is.factor(factor_data))
#new order
new_order_data <- factor(factor_data, levels = c("East","West","North","South"))
print(new_order_data)
# Create a input vector
data <- c("East","West","North","South","North","West","East","East","West","North","West","South")
print(data)
print(is.factor(data))
#Apply factor function
factor_data <- factor(data)
print(factor_data)
print(is.factor(factor_data))
#new order
new_order_data <- factor(factor_data, levels = c("East","West","North","South"))
print(new_order_data)
# Create a input vector
data <- c("East","West","North","South","North","West","East","East","West","North","West","South")
print(data)
print(is.factor(data))
#Apply factor function
factor_data <- factor(data)
print(factor_data)
print(is.factor(factor_data))
#new order
new_order_data <- factor(factor_data, levels = c("East","West","North","South"))
print(new_order_data)
#========================================================================================================
#Creating a data frame
emp.data <- data.frame(
emp_id = <- (1:5),
emp name = c("Rick", "Dan", "Michelle", "Ryan", "Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Print the data frame.
print(emp.data)
# Create a input vector
data <- c("East","West","North","South","North","West","East","East","West","North","West","South")
print(data)
print(is.factor(data))
#Apply factor function
factor_data <- factor(data)
print(factor_data)
print(is.factor(factor_data))
#new order
new_order_data <- factor(factor_data, levels = c("East","West","North","South"))
print(new_order_data)
#========================================================================================================
#Creating a data frame
emp.data <- data.frame(
emp_id <- (1:5),
emp name = c("Rick", "Dan", "Michelle", "Ryan", "Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Print the data frame.
print(emp.data)
# Create a input vector
data <- c("East","West","North","South","North","West","East","East","West","North","West","South")
print(data)
print(is.factor(data))
#Apply factor function
factor_data <- factor(data)
print(factor_data)
print(is.factor(factor_data))
#new order
new_order_data <- factor(factor_data, levels = c("East","West","North","South"))
print(new_order_data)
#========================================================================================================
#Creating a data frame
emp.data <- data.frame(
emp_id = c(1:5),
emp name = c("Rick", "Dan", "Michelle", "Ryan", "Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Print the data frame.
print(emp.data)
# Create a input vector
data <- c("East","West","North","South","North","West","East","East","West","North","West","South")
print(data)
print(is.factor(data))
#Apply factor function
factor_data <- factor(data)
print(factor_data)
print(is.factor(factor_data))
#new order
new_order_data <- factor(factor_data, levels = c("East","West","North","South"))
print(new_order_data)
#========================================================================================================
#Creating a data frame
emp.data <- data.frame(
emp_id = c(1:5),
emp_name = c("Rick", "Dan", "Michelle", "Ryan", "Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Print the data frame.
print(emp.data)
plot(cars)
plot(c(1,2),c(3))
plot(c(1,2),c(3,4))
install.packages("readxl")
install.packages("readxl")
install.packages("superml")
install.packages("ggplot2")
install.packages("dplyr")
library("ggplot2")
library("readxl")
library("superml")
library("dplyr")
setwd("C:\\Users\\Acer\\OneDrive\\Desktop\\R Project\\Airline Fair Prediction")
df = read_excel("train.xlsx")
View(df)
head(df)
names(df)
str(df)
summary(df)
summary(is.na(df))
miss = which(is.na(df))
df[miss,]
#Handling missing values
df = na.omit(df)
summary(is.na(df))
#Suitable data type for the column
unique(df$Total_Stops)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "non-stop",0)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "1 stop",1)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "2 stops",2)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "3 stops",3)
df$Total_Stops <- replace(df$Total_Stops,df$Total_Stops == "4 stops",4)
unique(df$Total_Stops)
class(df$Total_Stops) <- "integer"
head(df$Total_Stops)
#Suitable metrics for the column
duration <- c()
for (each in df$Duration) {
dur <- 0
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))*60
}
if(unlist(gregexpr("m",each)) != -1){
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,unlist(gregexpr("h",each))+1,unlist(gregexpr("m",each))-1))
}
else{
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))
}
}
duration <- c(duration,dur)
}
df["Duration (in mins)"] <- duration
dates <- c()
for (each in df$Date_of_Journey) {
date <- as.Date(each,"%d/%m/%Y")
dates <- c(dates, date)
}
df$`Date of Journey` <- dates
df$`Date of Journey` <- as.Date(df$`Date of Journey`,origin = "1970-01-01")
#Dropping columns which are of no use
data <- subset(df, select = -c(Route,Dep_Time,Arrival_Time,`Additional Info`,Duration,Source,Destination,Date_of_Journey))
View(data)
unique(df$Airline)
lb = LabelEncoder$new()
lb$fit(df$Airline)
data$Airline = lb$fit_transform(df$Airline)
ggplot(data, aes(x=Price)) + geom_histogram()
#Airline, Price
plot(data$Airline, data$Price)
ggplot(data=df, aes(x=Airline, y=Price))+geom_boxplot()
#Duration, Price
ggplot(data=data, aes(x=duration, y=Price))+geom_line()
#Total Stop, Price
ggplot(data=data, aes(x=Total_Stops, y=Price))+geom_jitter()
y = subset(data, c(Price))
y = subset(data, select = c(Price))
x = subset(data, select = c(-Price))
relation = lm(y~x)
relation <- lm(y~x)
typeof(y)
class(y) <- "vector"
relation <- lm(y~x)
class(y) <- "vector"
class(y) <- "integer"
unlist(y)
y = unlist(y)
relation <- lm(y~x)
model <- lm( Price ~ Airline + Total_Stops + `Duration (in mins)` + `Date of Journey`)
model <- lm( Price ~ Airline + Total_Stops + `Duration (in mins)` + `Date of Journey`,data = data)
print(model)
test = read_excel("train.xlsx")
result <- predict(model,test)
install.packages("readxl")
install.packages("superml")
install.packages("ggplot2")
install.packages("dplyr")
library("ggplot2")
library("readxl")
library("superml")
library("dplyr")
setwd("C:\\Users\\Acer\\OneDrive\\Desktop\\R Project\\Airline Fair Prediction")
df = read_excel("train.xlsx")
View(df)
head(df)
names(df)
str(df)
summary(df)
summary(is.na(df))
miss = which(is.na(df))
df[miss,]
#Handling missing values
df = na.omit(df)
summary(is.na(df))
total_stops <- function(dx){
unique(dx$Total_Stops)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "non-stop",0)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "1 stop",1)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "2 stops",2)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "3 stops",3)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "4 stops",4)
unique(dx$Total_Stops)
}
total_stops(df)
total_stops <- function(dx){
unique(dx$Total_Stops)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "non-stop",0)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "1 stop",1)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "2 stops",2)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "3 stops",3)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "4 stops",4)
return dx$Total_Stops
}
total_stops <- function(dx){
unique(dx$Total_Stops)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "non-stop",0)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "1 stop",1)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "2 stops",2)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "3 stops",3)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "4 stops",4)
return(dx$Total_Stops)
}
df$Total_Stops <- total_stops(df)
#Suitable metrics for the column
durat <- function(df){
duration <- c()
for (each in dx$Duration) {
dur <- 0
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))*60
}
if(unlist(gregexpr("m",each)) != -1){
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,unlist(gregexpr("h",each))+1,unlist(gregexpr("m",each))-1))
}
else{
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))
}
}
duration <- c(duration,dur)
}
return(duration)
}
df["Duration (in mins)"] <- durat(df)
#Suitable metrics for the column
durat <- function(dx){
duration <- c()
for (each in dx$Duration) {
dur <- 0
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))*60
}
if(unlist(gregexpr("m",each)) != -1){
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,unlist(gregexpr("h",each))+1,unlist(gregexpr("m",each))-1))
}
else{
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))
}
}
duration <- c(duration,dur)
}
return(duration)
}
df["Duration (in mins)"] <- durat(df)
date <- function(dx){
dates <- c()
for (each in dx$Date_of_Journey) {
date <- as.Date(each,"%d/%m/%Y")
dates <- c(dates, date)
}
dx$`Date of Journey` <- dates
dx$`Date of Journey` <- as.Date(dx$`Date of Journey`,origin = "1970-01-01")
return(dx$`Date of Journey`)
}
df$Date_of_Journey <- date(df)
#Dropping columns which are of no use
data <- subset(df, select = -c(Route,Dep_Time,Arrival_Time,`Additional Info`,Duration,Source,Destination,Date_of_Journey))
View(data)
unique(df$Airline)
lb = LabelEncoder$new()
lb$fit(df$Airline)
data$Airline = lb$fit_transform(df$Airline)
airline <- function(dx){
unique(dx$Airline)
lb = LabelEncoder$new()
lb$fit(dx$Airline)
dx$Airline = lb$fit_transform(dx$Airline)
return(dx$Airline)
}
df$Airline <- airline(df)
#Dropping columns which are of no use
data <- subset(df, select = -c(Route,Dep_Time,Arrival_Time,`Additional Info`,Duration,Source,Destination,Date_of_Journey))
View(data)
#Histogram
ggplot(data, aes(x=Price)) + geom_histogram()
#Airline, Price
plot(data$Airline, data$Price)
ggplot(data=df, aes(x=Airline, y=Price))+geom_boxplot()
#Duration, Price
ggplot(data=data, aes(x=duration, y=Price))+geom_line()
#Total Stop, Price
ggplot(data=data, aes(x=Total_Stops, y=Price))+geom_jitter()
model <- lm( Price ~ Airline + Total_Stops + `Duration (in mins)` + `Date of Journey`,data = data)
df = read_excel("train.xlsx")
View(df)
head(df)
names(df)
str(df)
summary(df)
summary(is.na(df))
miss = which(is.na(df))
df[miss,]
#Handling missing values
df = na.omit(df)
summary(is.na(df))
#Suitable data type for the column
total_stops <- function(dx){
unique(dx$Total_Stops)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "non-stop",0)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "1 stop",1)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "2 stops",2)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "3 stops",3)
dx$Total_Stops <- replace(dx$Total_Stops,dx$Total_Stops == "4 stops",4)
return(dx$Total_Stops)
}
df$Total_Stops <- total_stops(df)
#Suitable metrics for the column
durat <- function(dx){
duration <- c()
for (each in dx$Duration) {
dur <- 0
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))*60
}
if(unlist(gregexpr("m",each)) != -1){
if(unlist(gregexpr("h",each)) != -1){
dur <- dur + as.integer(substr(each,unlist(gregexpr("h",each))+1,unlist(gregexpr("m",each))-1))
}
else{
dur <- dur + as.integer(substr(each,1,unlist(gregexpr("h",each))-1))
}
}
duration <- c(duration,dur)
}
return(duration)
}
df["Duration (in mins)"] <- durat(df)
date <- function(dx){
dates <- c()
for (each in dx$Date_of_Journey) {
date <- as.Date(each,"%d/%m/%Y")
dates <- c(dates, date)
}
dx$`Date of Journey` <- dates
dx$`Date of Journey` <- as.Date(dx$`Date of Journey`,origin = "1970-01-01")
return(dx$`Date of Journey`)
}
df$`Date of Journey` <- date(df)
airline <- function(dx){
unique(dx$Airline)
lb = LabelEncoder$new()
lb$fit(dx$Airline)
dx$Airline = lb$fit_transform(dx$Airline)
return(dx$Airline)
}
df$Airline <- airline(df)
#Dropping columns which are of no use
data <- subset(df, select = -c(Route,Dep_Time,Arrival_Time,`Additional Info`,Duration,Source,Destination,Date_of_Journey))
View(data)
#Histogram
ggplot(data, aes(x=Price)) + geom_histogram()
#Airline, Price
plot(data$Airline, data$Price)
ggplot(data=df, aes(x=Airline, y=Price))+geom_boxplot()
#Duration, Price
ggplot(data=data, aes(x=duration, y=Price))+geom_line()
#Duration, Price
ggplot(data=data, aes(x=`Duration (in mins)`, y=Price))+geom_line()
#Total Stop, Price
ggplot(data=data, aes(x=Total_Stops, y=Price))+geom_jitter()
model <- lm( Price ~ Airline + Total_Stops + `Duration (in mins)` + `Date of Journey`,data = data)
print(model)
test = read_excel("train.xlsx")
test$Total_Stops <- total_stops(test)
test$`Duration (in mins)` <- durat(test)
test$`Date of Journey` <- date(test)
test$Airline <- airline(test)
result <- predict(model,test)
View(test)
print(result)
ggplot() + geom_point(aes(x=data$Price))
ggplot() + geom_point(data$Price)
ggplot() + geom_point(aes(data$Price))
plot(data)
abline(model)
score(result,test$Price)
ggplot(aes(result,test$Price)) + geom_point()
ggplot() + geom_point(aes(result,test$Price))
summary(model)
summary(model$coefficients)
summary(model)$coefficient
plot(x=predict(model), y= test$Price,
xlab='Predicted Values',
ylab='Actual Values',
main='Predicted vs. Actual Values')
abline(a=0, b=1)
plot(x=predict(model), y= test$Price,
xlab='Predicted Values',
ylab='Actual Values',
main='Predicted vs. Actual Values')
result_data <- data.frame(actual= test$Price, predicted=predict(model))
result_data <- data.frame(actual= test$Price, predicted=predict(model),na.omit())
result_data <- data.frame(actual= head(test$Price), predicted=head(predict(model))
)
result_data
